apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-ram
  labels:
    app: my-app-ram
spec:
  replicas: 8

  # Here we define the rolling update strategy
  # - maxSurge define how many pod we can add at a time
  # - maxUnavailable define how many pod can be unavailable
  #   during the rolling update
  #
  # Setting maxUnavailable to 0 would make sure we have the appropriate
  # capacity during the rolling update.
  # You can also use percentage based value instead of integer.
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  # The selector field tell the deployment which pod to update with
  # the new version. This field is optional, but if you have labels
  # uniquely defined for the pod, in this case the "version" label,
  # then we need to redefine the matchLabels and eliminate the version
  # field from there.
  selector:
    matchLabels:
      app: my-app-ram
  template:
    metadata:
      labels:
        app: my-app-ram
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9101"
    spec:
      containers:
      - name: my-app-ram
        image: djkormo/php-hello
        imagePullPolicy: Always
        resources:
          limits:
            cpu: "0.2"
            memory: "100Mi"
          requests:
            cpu: "0.1"
            memory: "50Mi"
        ports:
        - name: http
          containerPort: 80
        - name: probe
          containerPort: 80
        env:
        - name: VERSION
          value: v2.0.0
        - name: DEBUG
          value: "false"    
        livenessProbe:
          httpGet:
            path: /health
            port: probe
          initialDelaySeconds: 120
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: probe

          # Intial delay is set to a high value to have a better
          # visibility of the ramped deployment
          initialDelaySeconds: 60
          periodSeconds: 5
